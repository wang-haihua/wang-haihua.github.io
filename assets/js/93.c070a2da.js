(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{418:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"二叉搜索树-bst"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树-bst"}},[t._v("#")]),t._v(" 二叉搜索树 BST")]),t._v(" "),s("h3",{attrs:{id:"什么是二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是二叉搜索树"}},[t._v("#")]),t._v(" 什么是二叉搜索树")]),t._v(" "),s("p",[t._v("​\t二叉搜索树（又称：二叉查找树，二叉排序树，Binary Search Tree, BST）是一种特殊的二叉树：对于每个父节点，其左子节点的值小于等于父结点的值，其右子节点的值大于等于父结点的值。")]),t._v(" "),s("p",[t._v("​\t因此对于一个二叉搜索树，我们可以在 O(nlogn) 的时间内查找一个值是否存在：从根节点开始，若当前节点的值大于查找值则向左下走，若当前节点的值小于查找值则向右下走。")]),t._v(" "),s("p",[t._v("​\t同时因为二叉查找树是有序的，对其中序遍历的结果即为排好序的数组。")]),t._v(" "),s("p",[t._v("​\t一个二叉搜索树实例"),s("code",[t._v("[15,6,23,4,7,null,71,null,5,null,null,null,null,50,null]")]),t._v("如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/BST.png",alt:"BST"}})]),t._v(" "),s("p",[t._v("​\t二叉搜索树除了创建二叉树之外的基本操作有三种：（1）搜索（2）插入 （3）删除")]),t._v(" "),s("h3",{attrs:{id:"bst-的节点属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bst-的节点属性"}},[t._v("#")]),t._v(" BST 的节点属性")]),t._v(" "),s("p",[t._v("​\t和普通二叉树一样，二叉搜索树的每个节点"),s("strong",[t._v("至少")]),t._v("有 3 个属性：左孩子，右孩子和数据值，它然节点还可以包含其他潜在的属性。 二叉搜索树节点的结构体声明可以如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tT data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// T 代表模板类")]),t._v("\n\tNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("​\t二叉搜索树的节点放置规则是：任何节点的数据值一定大于其左子树中的每个节点的数据值，并小于其右子树中的每个节点的数据值。所以，在遍历二叉搜索树时，一直往左走可以得到最小元素，一直往右走可以得到最大元素。")]),t._v(" "),s("h3",{attrs:{id:"bst-的中序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bst-的中序遍历"}},[t._v("#")]),t._v(" BST 的中序遍历")]),t._v(" "),s("p",[t._v("​\t我们再来复习一遍二叉搜索树的特性：左子树上所有结点的值均小于它的根结点的值，右子树上所有结点的值均大于它的根结点的值。")]),t._v(" "),s("p",[t._v("​\t依据这一特性我们可以推出二叉搜索树的另一个重要特性："),s("strong",[t._v("二叉搜索树的中序遍历序列是一个递增序列")]),t._v("。")]),t._v(" "),s("p",[t._v("​\t二叉搜索树的中序遍历实现和普通二叉树一样，也有递归和非递归的实现方式。但是无论 BST 的高度如何，中序遍历的时间复杂度都是"),s("code",[t._v("O(N)")]),t._v("。")]),t._v(" "),s("p",[t._v("​\t**（1）递归实现方式：**先遍历左节点，再遍历父结点，最后遍历右节点")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\t（2）"),s("strong",[t._v("非递归实现方式：")])]),t._v(" "),s("p",[t._v("​\t二叉树中序遍历是从左子树的最左边的叶子节点开始处理，是"),s("strong",[t._v("自下而上的递归")]),t._v("。")]),t._v(" "),s("p",[t._v("​\t节点访问过程：由于是自下而上的访问，使用迭代实现中序遍历需要一个额外的指针来访问节点，从根节点一层层向左访问到左子树的最左边的叶子节点并逐个入栈，再开始向上迭代处理节点值。完成访问之后，栈中保存的是从根节点到最左边的叶子节点路径上的所有节点，他们都是左节点。")]),t._v(" "),s("p",[t._v("​\t节点处理过程：直接取栈顶元素将其值加入结果集，然后查看它是否具有右节点。如果有右节点则使用指针从该节点开始进行和根节点一样的访问过程，将从该节点开始到以该节点为根节点的子树的最左叶子节点路径上的所有节点入栈。完成访问之后再重复处理过程，最终完成所有节点的访问和处理。")]),t._v(" "),s("p",[t._v("​\t实现代码如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("vector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TreeNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tstack"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TreeNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tTreeNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从根节点到最左叶子节点的访问过程")]),t._v("\n            s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自下而上 左中右的节点处理过程")]),t._v("\n            cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"bst-搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bst-搜索"}},[t._v("#")]),t._v(" BST 搜索")]),t._v(" "),s("p",[t._v("​\t二叉搜索树，最为基础的操作当然就是"),s("strong",[t._v("搜索")]),t._v("了。")]),t._v(" "),s("p",[t._v("​\t二叉树搜索过程中使用根结点 root 和目标值 target 进行比较，不同情况处理如下：")]),t._v(" "),s("ul",[s("li",[t._v("若 target 小于根结点键值，只需在左子树中继续搜索")]),t._v(" "),s("li",[t._v("如果 target 大于根结点的键值，在右子树中进行继续搜索")]),t._v(" "),s("li",[t._v("若两者比较结果是相等，搜索完成，返回指向此结点的指针。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/%E6%90%9C%E7%B4%A2.gif",alt:"搜索"}})]),t._v(" "),s("p",[t._v("​\t搜索过程的代码实现如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\t除了快速搜索目标值，二叉搜索树中还可以快速查找最大值和最小值。")]),t._v(" "),s("p",[s("strong",[t._v("查找最大值和最小值")])]),t._v(" "),s("p",[t._v("​\t二叉搜索树的节点放置规则是：任何节点的数据值一定大于其左子树中的每个节点的数据值，并小于其右子树中的每个节点的数据值。所以，在遍历二叉搜索树时，一直往左走就可以得到最小元素，一直往右走就可以得到最大元素。")]),t._v(" "),s("p",[t._v("​\t查找最大值和最小值的代码实现如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找最小值")]),t._v("\nNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找最大值")]),t._v("\nNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\t二叉搜索树的搜索时间复杂度与其自身高度 "),s("strong",[t._v("h")]),t._v(" 相关，通常为"),s("code",[t._v("O(h)")]),t._v("。但值得注意的是：在普通的 BST 中其自身高度 "),s("strong",[t._v("h")]),t._v(" 可能和元素 O("),s("strong",[t._v("N")]),t._v(") 一样高，即向右倾斜或向左倾斜的情况。")]),t._v(" "),s("h3",{attrs:{id:"bst-插入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bst-插入"}},[t._v("#")]),t._v(" BST 插入")]),t._v(" "),s("p",[t._v("​\t二叉搜索树中插入新元素时，从根节点开始寻找插入位置，遇到数据值较大的节点就向左，遇到数据值较小的节点就向右。重复上述步骤一直到尾端，最终完成插入位置的寻找，然后插入新节点。")]),t._v(" "),s("p",[t._v("​\t我们还是使用递归实现二叉搜索树的插入操作：")]),t._v(" "),s("ul",[s("li",[t._v("遇到数据值较大的节点就向左递归")]),t._v(" "),s("li",[t._v("遇到数据值较小的节点就向右递归")]),t._v(" "),s("li",[t._v("到达尾端，新建节点并插入")])]),t._v(" "),s("p",[t._v("​    向上述二叉搜索树插入"),s("code",[t._v("9, 60")]),t._v("两个值的过程如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/%E6%8F%92%E5%85%A5.gif",alt:"插入"}})]),t._v(" "),s("p",[t._v("​\t代码实现如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\t二叉搜索树插入的时间复杂度也是 "),s("code",[t._v("O(h)")]),t._v(" ，其中 h 是 BST 的高度。同样的这个 "),s("strong",[t._v("h")]),t._v(" 在普通 BST 中可以和 O("),s("strong",[t._v("N")]),t._v(") 一样高，即向右倾斜或向左倾斜的情况。")]),t._v(" "),s("h3",{attrs:{id:"bst-删除的三种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bst-删除的三种情况"}},[t._v("#")]),t._v(" BST 删除的三种情况")]),t._v(" "),s("p",[t._v("​\t二叉搜索树的删除操作还是通过与搜索操作相似先找到要删除的节点：")]),t._v(" "),s("ul",[s("li",[t._v("如果找不到目标节点，什么都不做。")]),t._v(" "),s("li",[t._v("如果找到了目标节点，这时需要考虑三个可能的删除情况：\n"),s("ul",[s("li",[t._v("目标节点是叶子节点")]),t._v(" "),s("li",[t._v("目标节点有一个子节点")]),t._v(" "),s("li",[t._v("目标节点有两个子节点")])])])]),t._v(" "),s("h4",{attrs:{id:"_1-目标节点是叶子节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-目标节点是叶子节点"}},[t._v("#")]),t._v(" 1 目标节点是叶子节点")]),t._v(" "),s("p",[t._v("​\t第一种情况是最简单的，目标节点是当前二叉搜索树的叶子节点之一。")]),t._v(" "),s("p",[t._v("​\t要删除叶子顶点很容易，我们只需要找到这个节点并将其删除就可以了，下图展示了删除上述二叉搜索树叶子节点"),s("code",[t._v("5")]),t._v("的过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/%E5%88%A0%E9%99%A41.gif",alt:"删除1"}})]),t._v(" "),s("h4",{attrs:{id:"_2-目标节点有一个子节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-目标节点有一个子节点"}},[t._v("#")]),t._v(" 2 目标节点有一个子节点")]),t._v(" "),s("p",[t._v("​\t第二种情况也不是那么难：目标节点是当前二叉搜索树的非叶子节点，但是它只有一个子节点。")]),t._v(" "),s("p",[t._v("​\t删除这个节点时我们只需要将该节点的唯一的子节点与该节点的父节点连接即可，下图展示了删除上述二叉搜索树中只有一个子节点"),s("code",[t._v("71")]),t._v("的过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/%E5%88%A0%E9%99%A42.gif",alt:"删除2"}})]),t._v(" "),s("h4",{attrs:{id:"_3-目标节点有两个子节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-目标节点有两个子节点"}},[t._v("#")]),t._v(" 3 目标节点有两个子节点")]),t._v(" "),s("p",[t._v("​\t第三种情况是三者中最复杂的：目标节点是当前二叉搜索树中具有两个叶子节点的非叶子节点。")]),t._v(" "),s("p",[t._v("​\t删除该节点需要进行如下步骤：")]),t._v(" "),s("ul",[s("li",[t._v("搜索二叉搜索树找到该节点")]),t._v(" "),s("li",[t._v("找到以该节点为根节点的右子树中的最小结点"),s("code",[t._v("findMin()")])]),t._v(" "),s("li",[t._v("使用右子树中的最小节点替代该节点")]),t._v(" "),s("li",[t._v("然后依据上述三种删除情况，"),s("strong",[t._v("递归调整")]),t._v("其右子树的放置情况")])]),t._v(" "),s("p",[t._v("​    下图展示了删除上述二叉搜索树具有两个叶子节点"),s("code",[t._v("6")]),t._v("的过程。\n"),s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/%E5%88%A0%E9%99%A43.gif",alt:"删除3"}})]),t._v(" "),s("p",[t._v("​\t二叉搜索树删除操作的代码实现如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 搜索目标节点")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况 3")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttemp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况 2")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况 1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("​\t二叉搜索树删除操作的时间复杂度也是 "),s("code",[t._v("O(h)")]),t._v(" ，其中 h 是 BST 的高度，即使是第三种最复杂的情况时间复杂度也不会超过 "),s("code",[t._v("O(h)")]),t._v(" 。同样的这个 "),s("strong",[t._v("h")]),t._v(" 在普通 BST 中可以和 O("),s("strong",[t._v("N")]),t._v(") 一样高，即向右倾斜或向左倾斜的情况。")]),t._v(" "),s("h2",{attrs:{id:"平衡二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉搜索树"}},[t._v("#")]),t._v(" 平衡二叉搜索树")]),t._v(" "),s("p",[t._v("​\t在二叉搜索树 BST 的介绍过程中，我们不断提到了操作的时间复杂度，其中除了中序遍历之外，大部分操作的时间复杂度都是 O("),s("strong",[t._v("h")]),t._v(") ，即与 BST 自身的高度相关。")]),t._v(" "),s("p",[t._v("​\t而普通二叉搜索树可能会出现向右倾斜或向左倾斜的情况，即导致其高度为 "),s("code",[t._v("N-1")]),t._v("，从而使得二叉搜索树操作出现最坏情况时间复杂度为 O("),s("strong",[t._v("N")]),t._v(") 。")]),t._v(" "),s("p",[t._v("​\t为了降低二叉搜索树操作的时间复杂度，我们将讨论"),s("strong",[t._v("平衡二叉搜索树")]),t._v("的概念，以使得 "),s("code",[t._v("h = O(logN)")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("二叉树的极度平衡和极度不平衡状态如下图所示：\n")])])]),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/平衡BST.png",alt:"平衡BST"}}),t._v(" "),s("p",[t._v("​\t树形结构是否平衡并没有绝对的衡量标准，它指的是没有任何一个节点深度过大。不同的平衡条件，可以实现不同的树形操作效率，也会带来不同的实现复杂度。")]),t._v(" "),s("p",[t._v("​\t用的最多的平衡标准是："),s("strong",[t._v("其左子树和右子树均为平衡二叉树，且左子树和右子树的高度差的绝对值不超过 1")]),t._v("。这使得含有 N 个结点的平衡二叉树的最大深度为 "),s("code",[t._v("O(logN)")]),t._v("。")]),t._v(" "),s("p",[t._v("​\t基于平衡二叉树的概念，已经有多种实现平衡二叉搜索树的数据结构，例如 "),s("code",[t._v("AVL-Tree, RB-Tree, B/B+ Tree")]),t._v("等，他们比一般的二叉搜索树复杂，但是能够保证高效的查找、插入和删除等操作。")]),t._v(" "),s("h2",{attrs:{id:"自平衡二叉搜索树-avl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自平衡二叉搜索树-avl"}},[t._v("#")]),t._v(" 自平衡二叉搜索树 AVL")]),t._v(" "),s("h3",{attrs:{id:"什么是-avl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-avl"}},[t._v("#")]),t._v(" 什么是 AVL")]),t._v(" "),s("p",[t._v("​\tAVL-Tree，是由两位俄罗斯（苏联）发明家 "),s("em",[t._v("Georgy Adelson-Velskii")]),t._v(" 和 "),s("em",[t._v("Evgenii Landis")]),t._v(" 在 1962 年提出的。")]),t._v(" "),s("p",[t._v("​\tAVL-Tree 使用的平衡标准就是："),s("strong",[t._v("二叉搜索树所有非叶子节点的左子树和右子树均为平衡二叉树，且左子树和右子树的高度差的绝对值不超过 1")]),t._v("。该平衡条件就是为了确保整颗二叉搜索树的深度为"),s("code",[t._v("O(logN)")]),t._v("。")]),t._v(" "),s("p",[t._v("​\t自平衡二叉搜索树 AVL 是带了自平衡功能的二叉搜索树。当对其进行插入或删除操作后破坏了平衡条件时，它能够进行调整，使整颗树的高度平衡为 "),s("code",[t._v("O(logN)")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/AVL.png",alt:"AVL"}})]),t._v(" "),s("h3",{attrs:{id:"树的旋转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树的旋转"}},[t._v("#")]),t._v(" 树的旋转")]),t._v(" "),s("p",[t._v("​\t由于 AVL-Tree 的平衡条件，对其进行插入和删除操作后可能破坏整颗树的平衡，平衡被破坏后 AVL 能够自行进行调整恢复平衡。首先，找到平衡被破坏中的各个非叶子节点中深度最深的那一个。")]),t._v(" "),s("p",[t._v("​\t由于二叉树最多有两个子节点，而平衡被破坏即为该节点的左右子树的高度相差 2。因此，以插入操作为例可以将平衡被破坏分为如下四种情况：")]),t._v(" "),s("ol",[s("li",[t._v("插入左子节点的左子树  "),s("strong",[t._v("LL")])]),t._v(" "),s("li",[t._v("插入右子节点的右子树  "),s("strong",[t._v("RR")])]),t._v(" "),s("li",[t._v("插入左子节点的右子树  "),s("strong",[t._v("LR")])]),t._v(" "),s("li",[t._v("插入右子节点的左子树  "),s("strong",[t._v("RL")])])]),t._v(" "),s("p",[t._v("​    情况 1 和 2 又可以称为"),s("strong",[t._v("外侧插入")]),t._v("，使用单旋转操作调整恢复平衡；情况 3 和 4 称为"),s("strong",[t._v("内侧插入")]),t._v("，使用双旋转操作调整恢复平衡。")]),t._v(" "),s("h4",{attrs:{id:"_1-ll-单旋转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-ll-单旋转"}},[t._v("#")]),t._v(" 1 LL 单旋转")]),t._v(" "),s("p",[t._v("​\t上述 AVL-Tree 中的节点"),s("code",[t._v("20")]),t._v("，我们进行外侧插入，在其左子节点"),s("code",[t._v("11")]),t._v("的左子树插入新的节点"),s("code",[t._v("5")]),t._v("。这就破坏了整颗树的平衡，处于不平衡状态的节点有"),s("code",[t._v("41, 20")]),t._v("，而"),s("code",[t._v("20")]),t._v("的深度更大。")]),t._v(" "),s("p",[t._v("​\t为了调整平衡状态，需要将以"),s("code",[t._v("6")]),t._v("为根节点的子树提高一层，将以"),s("code",[t._v("29")]),t._v("为根节点的子树下降一层，进行如下单向右旋步骤：")]),t._v(" "),s("ul",[s("li",[t._v("深度最大的不平衡状态的节点 node，即"),s("code",[t._v("20")])]),t._v(" "),s("li",[t._v("node 的左孩子代替 node，即用"),s("code",[t._v("11")]),t._v("代替"),s("code",[t._v("20")]),t._v("，"),s("code",[t._v("41->left = 11")])]),t._v(" "),s("li",[t._v("node 左孩子的右子树变为 node 的左子树，即将"),s("code",[t._v("20->left = 15")])]),t._v(" "),s("li",[t._v("将 node 作为其原始左孩子的右子树，即将"),s("code",[t._v("11->right = 20")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/AVL-LL.gif",alt:"AVL-LL"}})]),t._v(" "),s("p",[t._v("​\tAVL-Tree LL型调整操作的代码实现如下：（"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/56066942",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码来源"),s("OutboundLink")],1),t._v("，如有侵权请告知）")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//LL型调整函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回:新父节点")]),t._v("\nNode "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LL_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//node为离操作结点最近的失衡的结点")]),t._v("\n    Node parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取失衡结点的父节点")]),t._v("\n    parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取失衡结点的左孩子")]),t._v("\n    son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置son结点右孩子的父指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//失衡结点的左孩子变更为son的右孩子")]),t._v("\n    node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新失衡结点的高度信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_depth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//失衡结点变成son的右孩子")]),t._v("\n    son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置son的父结点为原失衡结点的父结点")]),t._v("\n    son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果失衡结点不是根结点，则开始更新父节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果父节点的左孩子是失衡结点，指向现在更新后的新孩子son")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父节点的右孩子是失衡结点")]),t._v("\n              parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置失衡结点的父亲")]),t._v("\n    node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新son结点的高度信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_depth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-rr-单旋转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-rr-单旋转"}},[t._v("#")]),t._v(" 2 RR 单旋转")]),t._v(" "),s("p",[t._v("​\t上述 AVL-Tree 中的节点"),s("code",[t._v("65")]),t._v("，我们进行外侧插入，在其左子节点"),s("code",[t._v("91")]),t._v("的右子树插入新的节点"),s("code",[t._v("100")]),t._v("。这就破坏了整颗树的平衡，处于不平衡状态的节点有"),s("code",[t._v("41, 65")]),t._v("，而"),s("code",[t._v("65")]),t._v("的深度更大。")]),t._v(" "),s("p",[t._v("​\t为了调整平衡状态，需要将以"),s("code",[t._v("99")]),t._v("为根节点的子树提高一层，将以"),s("code",[t._v("50")]),t._v("为根节点的子树下降一层，进行如下单向左旋步骤：")]),t._v(" "),s("ul",[s("li",[t._v("深度最大的不平衡状态的节点 node，即"),s("code",[t._v("65")])]),t._v(" "),s("li",[t._v("node 的右孩子代替 node，即用"),s("code",[t._v("91")]),t._v("代替"),s("code",[t._v("65")]),t._v("，"),s("code",[t._v("41->right = 91")])]),t._v(" "),s("li",[t._v("node 右孩子的左子树变为 node 的右子树，即将"),s("code",[t._v("65->right = 72")])]),t._v(" "),s("li",[t._v("将 node 作为其原始右孩子的左子树，即将"),s("code",[t._v("91->left = 65")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/AVL-RR.gif",alt:"AVL-RR"}})]),t._v(" "),s("p",[t._v("​\tAVL-Tree RR型调整操作的代码实现如下：（"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/56066942",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码来源"),s("OutboundLink")],1),t._v("，如有侵权请告知）")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("RR型调整函数\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回新父节点")]),t._v("\nNode "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RR_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//node为离操作结点最近的失衡的结点")]),t._v("\n    Node parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取失衡结点的父节点")]),t._v("\n    parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取失衡结点的右孩子")]),t._v("\n    son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置son结点左孩子的父指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//失衡结点的右孩子变更为son的左孩子")]),t._v("\n    node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新失衡结点的高度信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_depth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//失衡结点变成son的左孩子")]),t._v("\n    son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置son的父结点为原失衡结点的父结点")]),t._v("\n    son"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果失衡结点不是根结点，则开始更新父节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果父节点的左孩子是失衡结点，指向现在更新后的新孩子son")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父节点的右孩子是失衡结点")]),t._v("\n            parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置失衡结点的父亲")]),t._v("\n    node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新son结点的高度信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_depth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-lr-双旋转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-lr-双旋转"}},[t._v("#")]),t._v(" 3 LR 双旋转")]),t._v(" "),s("p",[t._v("​\t上述 AVL-Tree 中的节点"),s("code",[t._v("20")]),t._v("，我们进行内侧插入，在其左子节点"),s("code",[t._v("11")]),t._v("的"),s("strong",[t._v("右子树")]),t._v("插入新的节点"),s("code",[t._v("14")]),t._v("。这就破坏了整颗树的平衡，处于不平衡状态的节点有"),s("code",[t._v("41, 20")]),t._v("，而"),s("code",[t._v("20")]),t._v("的深度更大。")]),t._v(" "),s("p",[t._v("​\t这种情况我们无法直接使用 LL 或者 RR 的单旋转完整调整，因为旋转之后仍然是不平衡的。为了调整平衡状态，需要将以"),s("code",[t._v("15")]),t._v("作为跳转子树的新根节点，这使得"),s("code",[t._v("11")]),t._v("必将成为"),s("code",[t._v("15")]),t._v("的左子节点，而"),s("code",[t._v("20")]),t._v("则将称为"),s("code",[t._v("15")]),t._v("的右子节点，这样就恢复了平衡状态。")]),t._v(" "),s("p",[t._v("​\t这一过程需要进行两次单旋转，首先进行 RR 单向左旋转让"),s("code",[t._v("11")]),t._v("成为"),s("code",[t._v("15")]),t._v("的左孩子；然后进行 LL 单向右旋转让"),s("code",[t._v("20")]),t._v("成为"),s("code",[t._v("15")]),t._v("的右孩子。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/AVL-LR.gif",alt:"AVL-LR"}})]),t._v(" "),s("p",[t._v("​\tAVL-Tree LR型调整操作的代码实现如下：（"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/56066942",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码来源"),s("OutboundLink")],1),t._v("，如有侵权请告知）")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//LR型，先左旋转，再右旋转")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回：新父节点")]),t._v("\nNode "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LR_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RR_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LL_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_4-rl-双旋转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-rl-双旋转"}},[t._v("#")]),t._v(" 4 RL 双旋转")]),t._v(" "),s("p",[t._v("​\t上述 AVL-Tree 中的节点"),s("code",[t._v("65")]),t._v("，我们进行内侧插入，在其右子节点"),s("code",[t._v("91")]),t._v("的"),s("strong",[t._v("左子树")]),t._v("插入新的节点"),s("code",[t._v("73")]),t._v("。这就破坏了整颗树的平衡，处于不平衡状态的节点有"),s("code",[t._v("41, 65")]),t._v("，而"),s("code",[t._v("65")]),t._v("的深度更大。")]),t._v(" "),s("p",[t._v("​\t这种情况我们无法直接使用 LL 或者 RR 的单旋转完整调整，因为旋转之后仍然是不平衡的。为了调整平衡状态，需要将以"),s("code",[t._v("72")]),t._v("作为跳转子树的新根节点，这使得"),s("code",[t._v("91")]),t._v("必将成为"),s("code",[t._v("72")]),t._v("的右子节点，而"),s("code",[t._v("65")]),t._v("则将称为"),s("code",[t._v("72")]),t._v("的左子节点，这样就恢复了平衡状态。")]),t._v(" "),s("p",[t._v("​\t这一过程需要进行两次单旋转，首先进行 LL 单向右旋转让"),s("code",[t._v("91")]),t._v("成为"),s("code",[t._v("72")]),t._v("的右孩子；然后进行 RR 单向左旋转让"),s("code",[t._v("65")]),t._v("成为"),s("code",[t._v("72")]),t._v("的右孩子。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Tree/img/BST/AVL-RL.gif",alt:"AVL-RL"}})]),t._v(" "),s("p",[t._v("​\tAVL-Tree RL型调整操作的代码实现如下：（"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/56066942",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码来源"),s("OutboundLink")],1),t._v("，如有侵权请告知）")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//RL型，先右旋转，再左旋转")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回:新父节点")]),t._v("\nNode "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RL_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LL_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RR_rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"avl-插入与删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#avl-插入与删除"}},[t._v("#")]),t._v(" AVL 插入与删除")]),t._v(" "),s("h4",{attrs:{id:"_1-avl-插入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-avl-插入"}},[t._v("#")]),t._v(" 1 AVL 插入")]),t._v(" "),s("p",[t._v("​\t介绍完树的旋转，其实就已经介绍完了 AVL-Tree 的核心步骤。")]),t._v(" "),s("p",[t._v("​\tAVL-Tree 插入的总体步骤如下：")]),t._v(" "),s("ol",[s("li",[t._v("和普通二叉搜索树插入过程一样，BST 插入")]),t._v(" "),s("li",[t._v("从插入点向上走遍历 AVL-Tree 直到回到根节点。每遍历一个节点，我们更新处于不平衡状态节点的高度和平衡因子：\n"),s("ul",[s("li",[t._v("如果存在不平衡状态的节点，停止在不平衡的第一个节点即深度最大的不平衡状态节点，其平衡因子为"),s("code",[t._v("+2 或 -2")])]),t._v(" "),s("li",[t._v("使用四个树旋转案例中的一个来跳转二叉树，使其重新达到平衡状态")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-avl-删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-avl-删除"}},[t._v("#")]),t._v(" 2 AVL 删除")]),t._v(" "),s("p",[t._v("​\tAVL 删除和 AVL 插入本质上是相似的方法，核心还是在于使用树旋转调整平衡状态。")]),t._v(" "),s("p",[t._v("​\tAVL-Tree 删除的总体步骤如下：")]),t._v(" "),s("ol",[s("li",[t._v("和普通二叉搜索树删除过程一样，使用三个删除案例中的一个进行 BST 删除")]),t._v(" "),s("li",[t._v("在 AVL-Tree 中从删除点向上走直到回到根节点。每遍历一个节点，我们更新处于不平衡状态节点的高度和平衡因子：\n"),s("ul",[s("li",[t._v("如果存在不平衡状态的节点，停止在不平衡的第一个节点即深度最大的不平衡状态节点，其平衡因子为"),s("code",[t._v("+2 或 -2")])]),t._v(" "),s("li",[t._v("使用四个树旋转案例中的一个来跳转二叉树，使其重新达到平衡状态")])])])]),t._v(" "),s("p",[s("strong",[t._v("总结")])]),t._v(" "),s("p",[t._v("​\tBST 插入和删除操作与AVL 的插入和删除操作相比的主要区别在于：可能会多次触发四种可能的需要重新平衡情况中的一种，但时间复杂度不会超过 "),s("code",[t._v("h = O(logN)")]),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);