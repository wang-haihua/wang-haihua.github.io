(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{422:function(t,a,r){"use strict";r.r(a);var e=r(7),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"最小生成树问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树问题"}},[t._v("#")]),t._v(" 最小生成树问题")]),t._v(" "),a("p",[t._v("参考链接：https://blog.csdn.net/Africa_South/article/details/88608619")]),t._v(" "),a("p",[t._v("​\t一个连通图的生成树是一个极小连通子图，它含有图中全部的顶点，但是只有足有构成一棵树的n-1条边。它有如下性质：")]),t._v(" "),a("ul",[a("li",[t._v("一棵有n个顶点的生成树有且只有n − 1条边；")]),t._v(" "),a("li",[t._v("如果一个图有n个顶点和小于n − 1条边，则是非连通图；如果它多于n − 1条边，则一定有环；")]),t._v(" "),a("li",[t._v("但是有n − 1条边的n个顶点的图不一定是生成树。（它只是必要条件）")])]),t._v(" "),a("p",[t._v("​    一棵生成树的代价就是树上各边的代价之和。")]),t._v(" "),a("p",[t._v("​\t最小生成树就是构造连通图的最小代价生成树，简称为"),a("strong",[t._v("最小生成树")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"prim算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prim算法"}},[t._v("#")]),t._v(" Prim算法")]),t._v(" "),a("p",[a("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Graph/img/prim.png",alt:"prim"}})]),t._v(" "),a("h4",{attrs:{id:"kruskal算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kruskal算法"}},[t._v("#")]),t._v(" Kruskal算法")]),t._v(" "),a("p",[a("img",{attrs:{src:"/home/wang/Desktop/TechStack/ALGLearning/LeetCode_Cpp/LeetCodeNote/Graph/img/kruskal.jpg",alt:"kruskal"}})])])}),[],!1,null,null,null);a.default=s.exports}}]);